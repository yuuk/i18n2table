import { useState } from 'react';
import Head from 'next/head';
import JSON5 from 'json5';
import { map } from 'lodash-es';
import Split from 'react-split';
import CustomJSONEditor from '../components/editor';

function getType(obj: any) {
    var type = Object.prototype.toString.call(obj);
    return type.split(' ')[1].replace(']', '').toLowerCase();
}

function jsonFrom(input: string) {
    const string = input.trim();
    if (!string) {
        return;
    }
    let result = null;
    try {
        result = JSON5.parse(string);
    } catch (err) {
        console.log(err);
    }
    return result;
}

function arrayFrom(json: any) {
    const queue = [];
    let next = json;
    while (next !== undefined) {
        if (getType(next) == 'array') {
            if (next.length > 0) {
                var type = getType(next[0]);
                var scalar =
                    type == 'number' || type == 'string' || type == 'boolean' || type == 'null';
                if (!scalar) {
                    return next;
                }
            }
        }
        if (getType(next) == 'object') {
            for (const key in next) {
                queue.push(next[key]);
            }
        }
        next = queue.shift();
    }
    return json;
}

function parseObject(obj: any, path = '') {
    const type = getType(obj);
    const scalar = type == 'number' || type == 'string' || type == 'boolean' || type == 'null';
    if (type == 'array' || type == 'object') {
        let d: any = {};
        for (let i in obj) {
            const newD = parseObject(obj[i], path + i + '/');
            d = Object.assign(d, newD);
        }
        return d;
    } else if (scalar) {
        let d: any = {};
        const endPath = path.substring(0, path.length - 1);
        d[endPath] = obj;
        return d;
    }
    return {};
}

function formatSource(input: string) {
    const json = jsonFrom(input);
    const obj = arrayFrom(json);
    return parseObject(obj);
}

export default function Home() {
    const [namespace, setNamespace] = useState('');
    const [source, setSource] = useState('');
    const [output, setOutput] = useState({});

    const handleChange = (input: string) => {
        setSource(input);
        const result = formatSource(input);
        setOutput(result);
    };

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name='description' content='Generated by create next app' />
                <link rel='icon' href='/favicon.ico' />
            </Head>

            <Split className='flex'>
                <div className='h-screen w-1/2 border'>
                    <input
                        className='block w-full py-3 px-3 text-base text-slate-900 placeholder:text-slate-300 border outline-none'
                        type='text'
                        placeholder='输入 namespace'
                        value={namespace}
                        onChange={(e) => setNamespace(e.target.value)}
                    />
                    <CustomJSONEditor value={jsonFrom(source)} onChange={handleChange} />
                </div>

                <div className='h-screen w-1/2 border overflow-y-auto'>
                    <table className='w-full h-auto text-center'>
                        <thead>
                            <tr>
                                <th className='w-1/2 border border-slate-300'>key</th>
                                <th className='w-1/2 border border-slate-300'>参考文案</th>
                            </tr>
                        </thead>
                        <tbody>
                            {map(output, (v, k) => {
                                return (
                                    <tr key={k}>
                                        <td className='w-1/2 border border-slate-300'>
                                            {namespace ? `${namespace}/${k}` : k}
                                        </td>
                                        <td className='w-1/2 border border-slate-300'>{v}</td>
                                    </tr>
                                );
                            })}
                        </tbody>
                    </table>
                </div>
            </Split>
        </>
    );
}
